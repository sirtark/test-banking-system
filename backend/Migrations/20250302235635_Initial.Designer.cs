// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OriginSolutions.Data;

#nullable disable

namespace OriginSolutions.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250302235635_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OriginSolutions.Entities.Account", b =>
                {
                    b.Property<string>("UBK")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<long>("NID")
                        .HasColumnType("bigint");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("UBK");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.HasIndex("UBK", "Alias", "NID")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("OriginSolutions.Entities.Card", b =>
                {
                    b.Property<string>("Number")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateOnly>("Expire")
                        .HasColumnType("date");

                    b.Property<string>("FK_Account")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<byte>("LoginFails")
                        .HasColumnType("tinyint");

                    b.Property<long>("NID")
                        .HasColumnType("bigint");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Number");

                    b.HasIndex("FK_Account");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("OriginSolutions.Entities.OperationEntry", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FK_Account")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("FK_Card")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("OperationType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FK_Account");

                    b.HasIndex("FK_Card", "OperationType");

                    b.ToTable("OperationEntries", (string)null);
                });

            modelBuilder.Entity("OriginSolutions.Entities.Operations.AtmWithdrawOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("FK_Account")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("FK_Card")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("FK_Entry")
                        .HasColumnType("int");

                    b.Property<long>("NewAccountBalance")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FK_Account");

                    b.HasIndex("FK_Card");

                    b.HasIndex("FK_Entry");

                    b.ToTable("Operations_AtmWithdraws", (string)null);
                });

            modelBuilder.Entity("OriginSolutions.Entities.Operations.BalanceQueryOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("FK_Account")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("FK_Card")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("FK_Entry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Account");

                    b.HasIndex("FK_Card");

                    b.HasIndex("FK_Entry");

                    b.ToTable("Operations_BalanceQueries", (string)null);
                });

            modelBuilder.Entity("OriginSolutions.Entities.Operations.TransactionOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("DestinationNewBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("FK_AuthorCard")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("FK_DestinationnAccount")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<int>("FK_Entry")
                        .HasColumnType("int");

                    b.Property<string>("FK_OriginAccount")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<long>("OriginNewBalance")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FK_AuthorCard");

                    b.HasIndex("FK_DestinationnAccount");

                    b.HasIndex("FK_Entry");

                    b.HasIndex("FK_OriginAccount");

                    b.ToTable("Operations_Transactions", (string)null);
                });

            modelBuilder.Entity("OriginSolutions.Entities.Session", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FK_Card")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Token");

                    b.HasIndex("FK_Card");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("OriginSolutions.Entities.Card", b =>
                {
                    b.HasOne("OriginSolutions.Entities.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("FK_Account")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OriginSolutions.Entities.OperationEntry", b =>
                {
                    b.HasOne("OriginSolutions.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("FK_Account")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("FK_Card")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("OriginSolutions.Entities.Operations.AtmWithdrawOperation", b =>
                {
                    b.HasOne("OriginSolutions.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("FK_Account")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("FK_Card")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.OperationEntry", "Entry")
                        .WithMany()
                        .HasForeignKey("FK_Entry")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Card");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("OriginSolutions.Entities.Operations.BalanceQueryOperation", b =>
                {
                    b.HasOne("OriginSolutions.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("FK_Account")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("FK_Card")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.OperationEntry", "Entry")
                        .WithMany()
                        .HasForeignKey("FK_Entry")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Card");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("OriginSolutions.Entities.Operations.TransactionOperation", b =>
                {
                    b.HasOne("OriginSolutions.Entities.Card", "AuthorCard")
                        .WithMany()
                        .HasForeignKey("FK_AuthorCard")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.Account", "DestinationAccount")
                        .WithMany()
                        .HasForeignKey("FK_DestinationnAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.OperationEntry", "Entry")
                        .WithMany()
                        .HasForeignKey("FK_Entry")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OriginSolutions.Entities.Account", "OriginAccount")
                        .WithMany()
                        .HasForeignKey("FK_OriginAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorCard");

                    b.Navigation("DestinationAccount");

                    b.Navigation("Entry");

                    b.Navigation("OriginAccount");
                });

            modelBuilder.Entity("OriginSolutions.Entities.Session", b =>
                {
                    b.HasOne("OriginSolutions.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("FK_Card")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("OriginSolutions.Entities.Account", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
